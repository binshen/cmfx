<?phpnamespace Home\Controller;use Common\Controller\AdminbaseController;class AdminReportController extends AdminbaseController {        protected $Dao;        function _initialize() {                parent::_initialize();        $this->Dao = D("Home/Perf");                vendor('PHPExcel.PHPExcel');    }        function index() {                $yearList = array();        for($i=0; $i<10; $i++) {            $yearList[] = date("Y",strtotime("-$i year"));        }        $this->assign('yearList', $yearList);                $this->display();    }        function download() {                extract($_POST);                $sql = "            SELECT            	sd_perf.date,            	sd_project.name AS p_name,            	sd_perf.num,            	sd_perf.total,            	sd_broker.name AS b_name,            	sd_store.name AS s_name,            	sd_rank.name AS r_name,            	sd_perf.perf,            	sd_perf.bkg AS m_perf,            	sd_perf.payd AS m_payd,            	sd_perf.q_perf,            	sd_perf.q_payd,            	sd_perf.y_perf,            	sd_perf.y_payd,            	sd_perf.comment,                sd_rank.id AS r_id,                sd_broker.id AS b_id,                sd_broker.date AS b_date            FROM sd_perf            LEFT JOIN sd_broker ON sd_broker.id = sd_perf.bid            LEFT JOIN sd_project ON sd_project.id = sd_perf.pid            LEFT JOIN sd_rank ON sd_rank.id = sd_broker.rank_id            LEFT JOIN sd_store ON sd_store.manager_id = sd_broker.parent_id            WHERE YEAR(sd_perf.date) = {$year}        ";                $suffix = $year;        if(!empty($quarter)) {            $sql .= " AND QUARTER(sd_perf.date) = {$quarter} ";            $suffix .= "-{$quarter}季度";        }        if(!empty($month)) {            $sql .= " AND MONTH(sd_perf.date) = {$month} ";            $suffix .= "-{$month}月份";        }                $sql .= " ORDER BY sd_perf.date ASC ";        $data = $this->Dao->query($sql);            $QPerf = array();        $YPerf = array();        $sql = "             SELECT bid, date, SUM(pay) AS pay            FROM sd_pay_log            WHERE type = 3             GROUP BY bid, date        ";        $q_data = $this->Dao->query($sql);        foreach ($q_data as $d) {            $bid = $d['bid'];            $date = $d['date'];            if(empty($QPerf[$bid])) $QPerf[$bid] = array();            $QPerf[$bid][$date] = $d['pay'];        }                $sql = "            SELECT bid, date, SUM(pay) AS pay            FROM sd_pay_log            WHERE type = 4            GROUP BY bid, date        ";        $y_data = $this->Dao->query($sql);        foreach ($y_data as $d) {            $bid = $d['bid'];            $date = $d['date'];            if(empty($YPerf[$bid])) $YPerf[$bid] = array();            $YPerf[$bid][$date] = $d['pay'];        }                        $reports = array();        $brokerTotalList = array();        foreach ($data as $d) {            $date = $d['date'];            $year = date('Y', strtotime($date));            $quarter = ceil(date('m', strtotime($date)) / 3);            $month = date('m', strtotime($date));                        $b_date = $d['b_date'];            $bid = $d['b_id'];            $rank_id = $d['r_id'];            if($rank_id == 1) {                $b_year = date('Y', strtotime($b_date));                $b_month = date('m', strtotime($b_date));                $b_day = date('d', strtotime($b_date));                if($b_year == $year && $b_month == $month && $b_day <= 15) {                    $d['wage'] = 2000;                } else {                    $d['wage'] = 0;                }            } else {                $d['wage'] = 0;            }            $reports[$year.$month][] = $d;                        if(empty($brokerTotalList[$bid])) $brokerTotalList[$bid] = array();            if(empty($brokerTotalList[$bid]['perf'])) $brokerTotalList[$bid]['perf'] = 0;            if(empty($brokerTotalList[$bid]['m_perf'])) $brokerTotalList[$bid]['m_perf'] = 0;            if(empty($brokerTotalList[$bid]['q_perf'])) $brokerTotalList[$bid]['q_perf'] = 0;            if(empty($brokerTotalList[$bid]['y_perf'])) $brokerTotalList[$bid]['y_perf'] = 0;            if(empty($brokerTotalList[$bid]['m_payd'])) $brokerTotalList[$bid]['m_payd'] = 0;            if(empty($brokerTotalList[$bid]['q_payd'])) $brokerTotalList[$bid]['q_payd'] = 0;            if(empty($brokerTotalList[$bid]['y_payd'])) $brokerTotalList[$bid]['y_payd'] = 0;                        $brokerTotalList[$bid]['b_name'] = $d['b_name'];            $brokerTotalList[$bid]['s_name'] = $d['s_name'];            $brokerTotalList[$bid]['r_name'] = $d['r_name'];            $brokerTotalList[$bid]['r_id']   = $d['r_id'];                        $brokerTotalList[$bid]['wage']   += $d['wage'];            $brokerTotalList[$bid]['perf']   += $d['perf'];            $brokerTotalList[$bid]['m_perf'] += $d['m_perf'];            $brokerTotalList[$bid]['q_perf'] += $d['q_perf'];            $brokerTotalList[$bid]['y_perf'] += $d['y_perf'];            //$brokerTotalList[$bid]['m_payd'] += $d['m_payd'];            $brokerTotalList[$bid]['q_payd'] += $d['q_payd'];            //$brokerTotalList[$bid]['y_payd'] += $d['y_payd'];        }                $objPHPExcel = new \PHPExcel();        $sheetIndex = 0;        foreach ($reports as $month => $rs) {            $objPHPExcel->createSheet($sheetIndex);            $objPHPExcel->setActiveSheetIndex($sheetIndex)                ->setCellValue('A1', '日期')                ->setCellValue('B1', '楼盘名称')                ->setCellValue('C1', '房号')                ->setCellValue('D1', '总价(万元)')                ->setCellValue('E1', '业务员')                ->setCellValue('F1', '店东')                ->setCellValue('G1', '级别')                ->setCellValue('H1', '业务员工资')                ->setCellValue('I1', '业务员业绩')                ->setCellValue('J1', '月度提成')                ->setCellValue('K1', '季度提成')                ->setCellValue('L1', '年度提成')                ->setCellValue('M1', '月度已发')                ->setCellValue('N1', '月度剩余')                ->setCellValue('O1', '备注');                        foreach ($rs as $i => $d) {                $idx = $i + 2;                $objPHPExcel->setActiveSheetIndex($sheetIndex)                    ->setCellValue('A' . $idx, $d['date'])                    ->setCellValue('B' . $idx, $d['p_name'])                    ->setCellValueExplicit('C' . $idx, $d['num'], \PHPExcel_Cell_DataType::TYPE_STRING)                    ->setCellValue('D' . $idx, $d['total'])                    ->setCellValue('E' . $idx, $d['b_name'])                    ->setCellValue('F' . $idx, $d['s_name'])                    ->setCellValue('G' . $idx, $d['r_name'])                    ->setCellValue('H' . $idx, $d['wage'])                    ->setCellValue('I' . $idx, $d['perf'])                    ->setCellValue('J' . $idx, $d['m_perf'])                    ->setCellValue('K' . $idx, $d['q_perf'])                    ->setCellValue('L' . $idx, $d['y_perf'])                    ->setCellValue('M' . $idx, $d['m_payd'])                    ->setCellValue('N' . $idx, $d['m_perf'] + $d['q_perf'] + $d['y_perf'] - $d['m_payd'])                    ->setCellValueExplicit('O' . $idx, $d['comment'], \PHPExcel_Cell_DataType::TYPE_STRING);            }            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(20);            $objPHPExcel->getActiveSheet()->setTitle(strval($month));            $sheetIndex++;        }                if(!empty($brokerTotalList)) {            $objPHPExcel->createSheet($sheetIndex);            $objPHPExcel->setActiveSheetIndex($sheetIndex)                ->setCellValue('A1', '业务员')                ->setCellValue('B1', '店东')                ->setCellValue('C1', '级别')                ->setCellValue('D1', '业务员工资')                ->setCellValue('E1', '业务员业绩')                ->setCellValue('F1', '月度提成')                ->setCellValue('G1', '季度提成')                ->setCellValue('H1', '年度提成')                ->setCellValue('I1', '已发提成')                ->setCellValue('J1', '剩余提成');                        $idx = 2;            foreach ($brokerTotalList as $d) {                $objPHPExcel->setActiveSheetIndex($sheetIndex)                    ->setCellValue('A' . $idx, $d['b_name'])                    ->setCellValue('B' . $idx, $d['s_name'])                    ->setCellValue('C' . $idx, $d['r_name'])                    ->setCellValue('D' . $idx, $d['wage'])                    ->setCellValue('E' . $idx, $d['perf'])                    ->setCellValue('F' . $idx, $d['m_perf'])                    ->setCellValue('G' . $idx, $d['q_perf'])                    ->setCellValue('H' . $idx, $d['y_perf'])                    ->setCellValue('I' . $idx, $d['m_payd'])                    ->setCellValue('J' . $idx, $d['m_perf'] + $d['q_perf'] + $d['y_perf'] - $d['m_payd']);                $idx++;            }                        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15);            $objPHPExcel->getActiveSheet()->setTitle("总表");        }                $filename = "业务员提成明细表-" . $suffix;                // Set active sheet index to the first sheet, so Excel opens this as the first sheet        $objPHPExcel->setActiveSheetIndex(0);                // Redirect output to a client’s web browser (Excel5)        header('Content-Type: application/vnd.ms-excel');        header('Content-Disposition: attachment;filename=' . $filename);        header('Cache-Control: max-age=0');        // If you're serving to IE 9, then the following may be needed        header('Cache-Control: max-age=1');                // If you're serving to IE over SSL, then the following may be needed        header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past        header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified        header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1        header ('Pragma: public'); // HTTP/1.0                $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');    }        function applyPerf() {                extract($_POST);                $sql = "            SELECT            sd_perf.date,            sd_project.name AS p_name,            sd_perf.num,            sd_perf.total,            sd_broker.name AS b_name,            sd_store.name AS s_name,            sd_rank.name AS r_name,            sd_perf.perf,            sd_perf.bkg AS m_perf,            sd_perf.payd AS m_payd,            sd_perf.comment,            sd_rank.id AS r_id,            sd_broker.id AS b_id,            sd_broker.date AS b_date            FROM sd_perf            LEFT JOIN sd_broker ON sd_broker.id = sd_perf.bid            LEFT JOIN sd_project ON sd_project.id = sd_perf.pid            LEFT JOIN sd_rank ON sd_rank.id = sd_broker.rank_id            LEFT JOIN sd_store ON sd_store.manager_id = sd_broker.parent_id            WHERE YEAR(sd_perf.date) = {$year}            AND MONTH(sd_perf.date) = {$month}        ";        $sql .= " ORDER BY sd_perf.date ASC ";        $data = $this->Dao->query($sql);                $reports = array();        foreach ($data as $d) {            $date = $d['date'];            $year = date('Y', strtotime($date));            $month = date('m', strtotime($date));                        $b_date = $d['b_date'];            $rank_id = $d['r_id'];            if($rank_id == 1) {                $b_year = date('Y', strtotime($b_date));                $b_month = date('m', strtotime($b_date));                $b_day = date('d', strtotime($b_date));                if($b_year == $year && $b_month == $month && $b_day <= 15) {                    $d['wage'] = 2000;                } else {                    $d['wage'] = 0;                }            } else {                $d['wage'] = 0;            }            if($rank_id >= 3 && $rank_id <= 5) {                $d['q_perf'] = $d['perf'] * ($rank_id - 2) * 0.05;                $d['y_perf'] = $d['perf'] * 0.05;            } else {                $d['q_perf'] = 0;                $d['y_perf'] = 0;            }            $reports[$year.$month][] = $d;        }                $objPHPExcel = new \PHPExcel();                $sheetIndex = 0;        foreach ($reports as $month => $rs) {            $objPHPExcel->createSheet($sheetIndex);            $objPHPExcel->setActiveSheetIndex($sheetIndex)                ->setCellValue('A1', '序号')                ->setCellValue('B1', '姓名')                ->setCellValue('C1', '楼盘名称')                ->setCellValue('D1', '房号')                ->setCellValue('E1', '日期')                ->setCellValue('F1', '级别')                ->setCellValue('G1', '工资')                ->setCellValue('H1', '业绩')                ->setCellValue('I1', '月度实发')                ->setCellValue('J1', '季度预留')                ->setCellValue('K1', '年度预留')                ->setCellValue('L1', '备注');                                foreach ($rs as $i => $d) {                $idx = $i + 2;                $objPHPExcel->setActiveSheetIndex($sheetIndex)                    ->setCellValue('A' . $idx, $i + 1)                    ->setCellValue('B' . $idx, $d['b_name'])                    ->setCellValue('C' . $idx, $d['p_name'])                    ->setCellValueExplicit('D' . $idx, $d['num'], \PHPExcel_Cell_DataType::TYPE_STRING)                    ->setCellValue('E' . $idx, $d['date'])                    ->setCellValue('F' . $idx, $d['r_name'])                    ->setCellValue('G' . $idx, $d['wage'])                    ->setCellValue('H' . $idx, $d['perf'])                    ->setCellValue('I' . $idx, $d['m_perf'])                    ->setCellValue('J' . $idx, $d['q_perf'])                    ->setCellValue('K' . $idx, $d['y_perf'])                    ->setCellValueExplicit('L' . $idx, $d['comment'], \PHPExcel_Cell_DataType::TYPE_STRING);            }            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);            $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(8);            $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(12);            $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(10);            $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(20);            $objPHPExcel->getActiveSheet()->setTitle(strval($month));            $sheetIndex++;        }                $filename = "顺达地产提成申请表";                // Set active sheet index to the first sheet, so Excel opens this as the first sheet        $objPHPExcel->setActiveSheetIndex(0);                // Redirect output to a client’s web browser (Excel5)        header('Content-Type: application/vnd.ms-excel');        header('Content-Disposition: attachment;filename=' . $filename);        header('Cache-Control: max-age=0');        // If you're serving to IE 9, then the following may be needed        header('Cache-Control: max-age=1');                // If you're serving to IE over SSL, then the following may be needed        header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past        header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified        header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1        header ('Pragma: public'); // HTTP/1.0                $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');    }}