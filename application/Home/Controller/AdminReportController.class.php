<?phpnamespace Home\Controller;use Common\Controller\AdminbaseController;class AdminReportController extends AdminbaseController {        protected $Dao;    protected $QuarterPerfDao;        function _initialize() {                parent::_initialize();        $this->Dao = D("Home/Perf");        $this->QuarterPerfDao =D("Home/QuarterPerf");    }        function index() {                $yearList = array();        for($i=0; $i<10; $i++) {            $yearList[] = date("Y",strtotime("-$i year"));        }        $this->assign('yearList', $yearList);                $this->display();    }        function download() {                extract($_POST);                $sql = "            SELECT            	sd_perf.date,            	sd_project.name AS p_name,            	sd_perf.num,            	sd_perf.total,            	sd_broker.name AS b_name,            	sd_store.name AS s_name,            	sd_rank.name AS r_name,            	sd_perf.perf,            	sd_perf.payd,                                sd_rank.id AS r_id,                sd_broker.id AS b_id            FROM sd_perf            LEFT JOIN sd_broker ON sd_broker.id = sd_perf.bid            LEFT JOIN sd_project ON sd_project.id = sd_perf.pid            LEFT JOIN sd_rank ON sd_rank.id = sd_broker.rank_id            LEFT JOIN sd_store ON sd_store.manager_id = sd_broker.parent_id            WHERE YEAR(sd_perf.date) = {$year}        ";                $suffix = $year;        if(!empty($quarter)) {            $sql .= " AND QUARTER(sd_perf.date) = {$quarter} ";            $suffix .= "-{$quarter}季度";        }        if(!empty($month)) {            $sql .= " AND MONTH(sd_perf.date) = {$month} ";            $suffix .= "-{$month}月份";        }                $sql .= " ORDER BY sd_perf.date ASC ";        $data = $this->Dao->query($sql);/*                $Q_Perf_Data = array();        $Y_Perf_Data = array();                $where = array('year' => $year);        if(!empty($quarter)) {            $where['quarter'] = $quarter;        }        if(empty($quarter) && !empty($month)) {            $where['quarter'] = ceil($month / 3);        }        $Q_Perf = $this->QuarterPerfDao            ->where($where)            ->select();                $Y_Perf = $this->QuarterPerfDao            ->field('bid, year, sum(perf) AS perf')            ->where($where)            ->group('bid, year')            ->select();                foreach ($Q_Perf as $q) {            $bid = $q['bid'];            $year = $q['year'];            $quarter = $q['quarter'];            $perf = $q['perf'];            if($Q_Perf_Data[$bid]) $Q_Perf_Data[$bid] = array();            if($Q_Perf_Data[$bid][$year]) $Q_Perf_Data[$bid][$year] = array();            $Q_Perf_Data[$bid][$year][$quarter] = $perf;        }                foreach ($Y_Perf as $y) {            $bid = $y['bid'];            $year = $y['year'];            $perf = $y['perf'];            if($Y_Perf_Data[$bid]) $Y_Perf_Data[$bid] = array();            $Y_Perf_Data[$bid][$year] = $perf;        }*/                $reports = array();        $brokerTotalList = array();        foreach ($data as $d) {            $rank_id = $d['r_id'];            $perf = $d['perf'];            $d['m_perf'] = getBrokerageByRank($rank_id, $perf);                        $bid = $d['b_id'];            $date = $d['date'];            $year = date('Y', strtotime($date));            $quarter = ceil(date('m', strtotime($date)) / 3);            $month = date('m', strtotime($date));//             if($month == 3 || $month == 6 || $month == 9 || $month == 12) {//                 $d['q_perf'] = $Q_Perf_Data[$bid][$year][$quarter];//             } else {//                 $d['q_perf'] = 0;//             }            //             if($month == 12) {//                 $d['y_perf'] = $Y_Perf_Data[$bid][$year];//             } else {//                 $d['y_perf'] = 0;//             }            if(empty($d['q_perf'])) $d['q_perf'] = 0;            if($rank_id == 3) {                $d['q_perf'] = $perf * 0.05;            } else if($rank_id == 4) {                $d['q_perf'] = $perf * 0.10;            } else if($rank_id == 5) {                $d['q_perf'] = $perf * 0.15;            }                        if(empty($d['y_perf'])) $d['y_perf'] = 0;            if($rank_id == 3 || $rank_id == 4 || $rank_id == 5) {                $d['y_perf'] = $perf * 0.05;            }            $reports[$year.$month][] = $d;                        if(empty($brokerTotalList[$bid])) $brokerTotalList[$bid] = array();            if(empty($brokerTotalList[$bid]['perf'])) $brokerTotalList[$bid]['perf'] = 0;            if(empty($brokerTotalList[$bid]['m_perf'])) $brokerTotalList[$bid]['m_perf'] = 0;            if(empty($brokerTotalList[$bid]['q_perf'])) $brokerTotalList[$bid]['q_perf'] = 0;            if(empty($brokerTotalList[$bid]['y_perf'])) $brokerTotalList[$bid]['y_perf'] = 0;                        $brokerTotalList[$bid]['b_name'] = $d['b_name'];            $brokerTotalList[$bid]['s_name'] = $d['s_name'];            $brokerTotalList[$bid]['r_name'] = $d['r_name'];                        $brokerTotalList[$bid]['perf'] += $perf;            $brokerTotalList[$bid]['m_perf'] += $d['m_perf'];            $brokerTotalList[$bid]['q_perf'] += $d['q_perf'];            $brokerTotalList[$bid]['y_perf'] += $d['y_perf'];            $brokerTotalList[$bid]['payd'] += $d['payd'];        }        vendor('PHPExcel.PHPExcel');                $objPHPExcel = new \PHPExcel();                $sheetIndex = 0;        foreach ($reports as $month => $rs) {            $objPHPExcel->createSheet($sheetIndex);            $objPHPExcel->setActiveSheetIndex($sheetIndex)                ->setCellValue('A1', '日期')                ->setCellValue('B1', '楼盘名称')                ->setCellValue('C1', '房号')                ->setCellValue('D1', '总价')                ->setCellValue('E1', '业务员')                ->setCellValue('F1', '店东')                ->setCellValue('G1', '级别')                ->setCellValue('H1', '业务员业绩')                ->setCellValue('I1', '月度提成')                ->setCellValue('J1', '季度提成')                ->setCellValue('K1', '年度提成')                ->setCellValue('L1', '已发提成')                ->setCellValue('M1', '剩余提成');                        foreach ($rs as $i => $d) {                $idx = $i + 2;                $objPHPExcel->setActiveSheetIndex($sheetIndex)                    ->setCellValue('A' . $idx, $d['date'])                    ->setCellValue('B' . $idx, $d['p_name'])                    ->setCellValue('C' . $idx, $d['num'])                    ->setCellValue('D' . $idx, $d['total'])                    ->setCellValue('E' . $idx, $d['b_name'])                    ->setCellValue('F' . $idx, $d['s_name'])                    ->setCellValue('G' . $idx, $d['r_name'])                    ->setCellValue('H' . $idx, $d['perf'])                    ->setCellValue('I' . $idx, $d['m_perf'])                    ->setCellValue('J' . $idx, $d['q_perf'])                    ->setCellValue('K' . $idx, $d['y_perf'])                    ->setCellValue('L' . $idx, $d['payd'])                    ->setCellValue('M' . $idx, $d['m_perf']+$d['q_perf']+$d['y_perf']-$d['payd']);            }                        $objPHPExcel->getActiveSheet()->setTitle(strval($month));            $sheetIndex++;        }                if(!empty($brokerTotalList)) {            $objPHPExcel->createSheet($sheetIndex);            $objPHPExcel->setActiveSheetIndex($sheetIndex)                ->setCellValue('A1', '业务员')                ->setCellValue('B1', '店东')                ->setCellValue('C1', '级别')                ->setCellValue('D1', '业务员总业绩')                ->setCellValue('E1', '月度总提成')                ->setCellValue('F1', '季度总提成')                ->setCellValue('G1', '年度总提成')                ->setCellValue('H1', '已发总提成')                ->setCellValue('I1', '剩余总提成');                        $idx = 2;            foreach ($brokerTotalList as $d) {                $objPHPExcel->setActiveSheetIndex($sheetIndex)                    ->setCellValue('A' . $idx, $d['b_name'])                    ->setCellValue('B' . $idx, $d['s_name'])                    ->setCellValue('C' . $idx, $d['r_name'])                    ->setCellValue('D' . $idx, $d['perf'])                    ->setCellValue('E' . $idx, $d['m_perf'])                    ->setCellValue('F' . $idx, $d['q_perf'])                    ->setCellValue('G' . $idx, $d['r_name'])                    ->setCellValue('H' . $idx, $d['payd'])                    ->setCellValue('I' . $idx, $d['m_perf']+$d['q_perf']+$d['y_perf']-$d['payd']);                $objPHPExcel->getActiveSheet()->setTitle("总表");                $idx++;            }        }                $filename = "业务员提成明细表-" . $suffix;                // Set active sheet index to the first sheet, so Excel opens this as the first sheet        $objPHPExcel->setActiveSheetIndex(0);                // Redirect output to a client’s web browser (Excel5)        header('Content-Type: application/vnd.ms-excel');        header('Content-Disposition: attachment;filename=' . $filename);        header('Cache-Control: max-age=0');        // If you're serving to IE 9, then the following may be needed        header('Cache-Control: max-age=1');                // If you're serving to IE over SSL, then the following may be needed        header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past        header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified        header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1        header ('Pragma: public'); // HTTP/1.0                $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');    }}